name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: roomio

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Build application
      run: npm run build:prod

  build-and-push:
    needs: test
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
        flavor: |
          latest=auto
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        format: 'table'
        exit-code: '0'
      continue-on-error: true

    - name: Security scan summary (JSON)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        format: 'json'
        output: 'trivy-results.json'
        exit-code: '0'
      continue-on-error: true

    - name: Display security scan summary
      if: always()
      run: |
        echo "=== Security Scan Summary ==="
        echo "üîç Scanned image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}"

        if [ -f trivy-results.json ]; then
          echo "‚úÖ Security scan completed successfully"

          # Parse and display vulnerability counts
          if command -v jq &> /dev/null; then
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results.json 2>/dev/null || echo '0')
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-results.json 2>/dev/null || echo '0')
            MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-results.json 2>/dev/null || echo '0')
            LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-results.json 2>/dev/null || echo '0')

            echo "üìä Vulnerability Summary:"
            echo "   üî¥ Critical: $CRITICAL"
            echo "   üü† High: $HIGH"
            echo "   üü° Medium: $MEDIUM"
            echo "   üü¢ Low: $LOW"

            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "‚ö†Ô∏è  High or Critical vulnerabilities found! Review the scan results above."
            else
              echo "‚úÖ No Critical or High severity vulnerabilities found!"
            fi
          else
            echo "üìÑ Scan completed - see detailed results above"
          fi
        else
          echo "‚ùå Security scan failed or results not found"
          echo "This may be due to image availability issues or scan errors"
        fi

    - name: Detect merge commits and sync image tags
      id: detect_merge
      run: |
        # Check if this is a merge commit by checking parent count
        PARENT_COUNT=$(git rev-list --parents -n 1 HEAD | wc -w)
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        IS_MERGE=false
        SOURCE_BRANCH=""

        # A merge commit has 2+ parents (current commit + parent commits)
        if [ "$PARENT_COUNT" -gt 2 ]; then
          echo "üìã Merge commit detected"
          echo "üìù Commit message: $COMMIT_MESSAGE"

          # Detect which branches are being merged based on current branch
          if [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            # We're on staging, so this should be a merge from develop
            if [[ "$COMMIT_MESSAGE" =~ "develop" ]] || [[ "$COMMIT_MESSAGE" =~ "Merge" ]]; then
              IS_MERGE=true
              SOURCE_BRANCH="develop"
              echo "üîÄ Detected merge from develop to staging"
            fi
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # We're on main, so this should be a merge from staging
            if [[ "$COMMIT_MESSAGE" =~ "staging" ]] || [[ "$COMMIT_MESSAGE" =~ "Merge" ]]; then
              IS_MERGE=true
              SOURCE_BRANCH="staging"
              echo "üîÄ Detected merge from staging to main"
            fi
          fi
        else
          echo "üìã Regular commit (not a merge)"
        fi

        echo "is_merge=$IS_MERGE" >> $GITHUB_OUTPUT
        echo "source_branch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT

    - name: Sync image tags from source branch (for merges)
      if: steps.detect_merge.outputs.is_merge == 'true'
      run: |
        SOURCE_BRANCH="${{ steps.detect_merge.outputs.source_branch }}"

        if [[ "${{ github.ref }}" == "refs/heads/staging" ]] && [[ "$SOURCE_BRANCH" == "develop" ]]; then
          # Sync development tag to staging
          SOURCE_TAG=$(grep "newTag:" k8s/overlays/development/kustomization.yaml | awk '{print $2}')
          echo "üì¶ Syncing image tag from development to staging: $SOURCE_TAG"
          sed -i "s|newTag: .*|newTag: $SOURCE_TAG|" k8s/overlays/staging/kustomization.yaml
          echo "synced_tag=$SOURCE_TAG" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]] && [[ "$SOURCE_BRANCH" == "staging" ]]; then
          # Sync staging tag to production
          SOURCE_TAG=$(grep "newTag:" k8s/overlays/staging/kustomization.yaml | awk '{print $2}')
          echo "üì¶ Syncing image tag from staging to production: $SOURCE_TAG"
          sed -i "s|newTag: .*|newTag: $SOURCE_TAG|" k8s/overlays/production/kustomization.yaml
          echo "synced_tag=$SOURCE_TAG" >> $GITHUB_OUTPUT
        fi

    - name: Update image tags in manifests (for regular commits)
      if: steps.detect_merge.outputs.is_merge == 'false'
      run: |
        # Get the commit SHA for unique tagging
        COMMIT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        IMAGE_TAG="sha-${COMMIT_SHA}"

        echo "Commit SHA: $COMMIT_SHA"
        echo "Updating image tag to: $IMAGE_TAG"

        # Update Kustomize overlays based on branch
        if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "Updating development deployment..."
          sed -i "s|newTag: .*|newTag: $IMAGE_TAG|" k8s/overlays/development/kustomization.yaml
        elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
          echo "Updating staging deployment..."
          sed -i "s|newTag: .*|newTag: $IMAGE_TAG|" k8s/overlays/staging/kustomization.yaml
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "Updating production deployment..."
          sed -i "s|newTag: .*|newTag: $IMAGE_TAG|" k8s/overlays/production/kustomization.yaml
        fi

    - name: Commit and push updated manifests
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Add the appropriate overlay file based on branch
        if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          git add k8s/overlays/development/kustomization.yaml
        elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
          git add k8s/overlays/staging/kustomization.yaml
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          git add k8s/overlays/production/kustomization.yaml
        fi

        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Determine commit message based on whether this was a merge or regular commit
          if [[ "${{ steps.detect_merge.outputs.is_merge }}" == "true" ]]; then
            SOURCE_BRANCH="${{ steps.detect_merge.outputs.source_branch }}"
            SYNCED_TAG=$(grep "newTag:" k8s/overlays/$([[ "${{ github.ref }}" == "refs/heads/staging" ]] && echo "staging" || echo "production")/kustomization.yaml | awk '{print $2}')
            git commit -m "chore: sync image tag from $SOURCE_BRANCH ($SYNCED_TAG) [skip ci]"
          else
            COMMIT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
            IMAGE_TAG="sha-${COMMIT_SHA}"
            git commit -m "chore: update image tag to $IMAGE_TAG [skip ci]"
          fi
          git push
        fi

  deploy-dev:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Development Deployment Summary
      run: |
        echo "üöÄ Development deployment triggered"
        echo "üì¶ Image: ghcr.io/pablodelarco/roomio:sha-$(echo ${{ github.sha }} | cut -c1-7)"
        echo "üéØ Namespace: roomio-dev"
        echo "üîÑ ArgoCD will automatically sync the changes within 3 minutes"
        echo "üåê Access: https://dev.roomiorentals.com"

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'

    steps:
    - name: Staging Deployment Summary
      run: |
        echo "üöÄ Staging deployment triggered"
        echo "üì¶ Image: ghcr.io/pablodelarco/roomio:sha-$(echo ${{ github.sha }} | cut -c1-7)"
        echo "üéØ Namespace: roomio-staging"
        echo "üîÑ ArgoCD will automatically sync the changes within 3 minutes"
        echo "üåê Access: https://staging.roomiorentals.com"

  deploy-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Production Deployment Summary
      run: |
        echo "üöÄ Production deployment triggered"
        echo "üì¶ Image: ghcr.io/pablodelarco/roomio:sha-$(echo ${{ github.sha }} | cut -c1-7)"
        echo "üéØ Namespace: roomio-prod"
        echo "üîÑ ArgoCD will automatically sync the changes within 3 minutes"
        echo "üåê Access: https://roomiorentals.com"
