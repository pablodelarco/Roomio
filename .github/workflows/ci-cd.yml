name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: staywell-manager

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Build application
      run: npm run build:prod

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        flavor: |
          latest=auto
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        format: 'table'
        exit-code: '0'
      continue-on-error: true

    - name: Security scan summary (JSON)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        format: 'json'
        output: 'trivy-results.json'
        exit-code: '0'
      continue-on-error: true

    - name: Display security scan summary
      if: always()
      run: |
        echo "=== Security Scan Summary ==="
        echo "🔍 Scanned image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}"

        if [ -f trivy-results.json ]; then
          echo "✅ Security scan completed successfully"

          # Parse and display vulnerability counts
          if command -v jq &> /dev/null; then
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results.json 2>/dev/null || echo '0')
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-results.json 2>/dev/null || echo '0')
            MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-results.json 2>/dev/null || echo '0')
            LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-results.json 2>/dev/null || echo '0')

            echo "📊 Vulnerability Summary:"
            echo "   🔴 Critical: $CRITICAL"
            echo "   🟠 High: $HIGH"
            echo "   🟡 Medium: $MEDIUM"
            echo "   🟢 Low: $LOW"

            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "⚠️  High or Critical vulnerabilities found! Review the scan results above."
            else
              echo "✅ No Critical or High severity vulnerabilities found!"
            fi
          else
            echo "📄 Scan completed - see detailed results above"
          fi
        else
          echo "❌ Security scan failed or results not found"
          echo "This may be due to image availability issues or scan errors"
        fi

    - name: Update image tags in manifests
      run: |
        # Extract the first tag from the metadata output
        IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1 | cut -d':' -f2)
        echo "Updating image tag to: $IMAGE_TAG"

        # Update development overlay
        if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          sed -i "s|newTag: .*|newTag: $IMAGE_TAG|" k8s/overlays/development/kustomization.yaml
        fi

        # Update production overlay
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          sed -i "s|newTag: .*|newTag: $IMAGE_TAG|" k8s/overlays/production/kustomization.yaml
        fi

    - name: Commit and push updated manifests
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add k8s/overlays/*/kustomization.yaml
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "chore: update image tag to $(echo '${{ steps.meta.outputs.tags }}' | head -n1 | cut -d':' -f2) [skip ci]"
          git push
        fi

  deploy-dev:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Trigger ArgoCD Sync (Development)
      run: |
        echo "🚀 Development deployment triggered"
        echo "ArgoCD will automatically sync the changes"
        
  deploy-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Trigger ArgoCD Sync (Production)
      run: |
        echo "🚀 Production deployment triggered"
        echo "ArgoCD will automatically sync the changes"
